name: ci-deploy-action
description: "GitHub Action to setup and run the deployment script on AWS"

inputs:
  token:
    description: "Personal access token to handle the repo"
    required: true
  npm:
    description: "Install packages"
    required: false
    default: "false"
  lfs:
    description: "Pull data with Git LFS"
    required: false
    default: "false"
  role-to-assume:
    description: "IAM role ARN to assume via OIDC"
    required: true
  aws-region:
    description: "AWS region (default eu-west-1)"
    required: false
    default: "eu-west-1"
  node-version:
    description: "Pick the node version to use [20.x, 22.x]"
    default: 22.x
  deploy-args:
    description: "Extra args forwarded to deploy.sh"
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Extract env
      id: extract_env
      shell: bash
      run: |
        branch_name=${GITHUB_REF#refs/heads/}
        if [ "$branch_name" = "release" ]; then
          echo "ENV=production" >> $GITHUB_OUTPUT
        else
          echo "ENV=$branch_name" >> $GITHUB_OUTPUT
        fi

    - if: ${{ inputs.npm == 'true' }}
      name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: npm

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.token }}
        lfs: ${{ inputs.lfs }}

    - if: ${{ inputs.lfs == 'true' }}
      name: Checkout LFS objects
      shell: bash
      run: git lfs checkout && git lfs pull

    - if: ${{ inputs.npm == 'true' }}
      name: Install dependencies
      shell: bash
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Configure git
      shell: bash
      run: |
        git config user.name 'MeblabsBot'
        git config user.email 'github@meblabs.com'

    - name: Ensure jq
      shell: bash
      run: |
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -y
          sudo apt-get install -y jq
        fi

    - name: Call deploy script
      shell: bash
      run: |
        set -euo pipefail
        cd deploy
        bash -x deploy.sh -e "${{ steps.extract_env.outputs.ENV }}" ${{ inputs.deploy-args }}
