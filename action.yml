name: ci-deploy-action
description: "GitHub Action to setup and run the deployment script on AWS"

inputs:
  token:
    description: "Personal access token to handle the repo"
    required: true
  npm:
    description: "Install packages"
    required: false
    type: boolean
    default: false
  lfs:
    description: "Pull data with Git LFS"
    required: false
    default: false
    type: boolean
  role-to-assume:
    description: "IAM role ARN to assume via OIDC"
    required: true
  aws-region:
    description: "AWS region (default eu-west-1)"
    required: false
    default: "eu-west-1"
  node-version:
    description: "Pick the node version to use [20.x, 22.x]"
    default: 22.x

runs:
  using: composite
  steps:
    - name: Extract env
      shell: bash
      run: |
        branch_name=${GITHUB_REF#refs/heads/}
        if [ "$branch_name" = "release" ]; then
          echo "ENV=$(echo production)" >> $GITHUB_OUTPUT
        else
          echo "ENV=$(echo $branch_name)" >> $GITHUB_OUTPUT
        fi
      id: extract_env

    - if: ${{ inputs.npm == 'true' }}
      name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: npm 

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.token }}
        lfs: ${{ inputs.lfs }}
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}

    - if: ${{ inputs.lfs == 'true' }}
      name: Checkout LFS objects
      shell: bash
      run: git lfs checkout && git lfs pull

    - if: ${{ inputs.npm == 'true' }}
      name: Install dependencies
      shell: bash
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Configure git
      shell: bash
      run: |
        git config user.name 'MeblabsBot'
        git config user.email 'github@meblabs.com'

    - name: Install jq
      shell: bash
      run: sudo apt-get install jq

    - name: Call deploy script
      shell: bash
      run: |
        cd deploy
        bash deploy.sh -e ${{ steps.extract_env.outputs.ENV }} -a default
